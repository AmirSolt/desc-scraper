// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateVideosParams struct {
	YtID                 string             `json:"yt_id"`
	Title                string             `json:"title"`
	Tags                 string             `json:"tags"`
	DefaultLanguage      string             `json:"default_language"`
	Description          string             `json:"description"`
	LiveBroadcastContent bool               `json:"live_broadcast_content"`
	PublishedAt          pgtype.Timestamptz `json:"published_at"`
	ChannelID            int32              `json:"channel_id"`
}

const searchVideoDescs = `-- name: SearchVideoDescs :many


SELECT id, created_at, yt_id, title, tags, default_language, description, desc_fts, live_broadcast_content, published_at, channel_id
FROM videos
WHERE desc_fts @@ to_tsquery($1)
`

// =========================================
// events
func (q *Queries) SearchVideoDescs(ctx context.Context, toTsquery string) ([]Video, error) {
	rows, err := q.db.Query(ctx, searchVideoDescs, toTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.YtID,
			&i.Title,
			&i.Tags,
			&i.DefaultLanguage,
			&i.Description,
			&i.DescFts,
			&i.LiveBroadcastContent,
			&i.PublishedAt,
			&i.ChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
